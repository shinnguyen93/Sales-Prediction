library(dplyr)
library(tidyverse)
library(caret)
library(e1071)
library(klaR)
#load dataframe
df<-read.csv("BRCA_RNASeqv2_top50.csv", header=TRUE)
#remove class label
df_no_class<-df[,1:50]
df.mat<-data.matrix(df_no_class)
gene_name<-colnames(df_no_class)
####Show Skeleton network####
skel.net <- pcalg::skeleton(suffStat = list(C = cor(df.mat), n = nrow (df.mat)),
indepTest = gaussCItest, alpha = 0.01, p = ncol(df_no_class))
####Find top 10 genes that have causal effect on ABCA9####
pc.fit <- pc(suffStat = list(C = cor(df_no_class), n = nrow(df_no_class)),
indepTest = gaussCItest, labels=colnames(df_no_class) ,alpha = 0.01)
#Create empty Matrix
gene_mat<-matrix(nrow = 50,ncol = 4)
#Loop through all genes to get causal effect of all genes on ABCA9
for (i in 1:ncol(df.mat)){
gene_mat[i,]<-ida(i, 22, cov(df.mat), pc.fit@graph)
}
#Find the minimum absolute value from multiple causal effect
causal_mat<-apply(abs(gene_mat),1,min)
causal_mat<-as.data.frame(causal_mat)
causal_mat$gene_index <- rownames(causal_mat)
causal_mat$gene <- gene_name
names(causal_mat)[names(causal_mat) == "causal_mat"] <- "Causal_Effect"
#Remove gene 22 as it is ABCA9
causal_mat<-causal_mat[-22,]
#Sort genes base on descending causal effect
causal_mat<-causal_mat[order(-causal_mat$Causal_Effect),]
####Learn Markov Blanket of ABCA9####
MB.ABCA9<-learn.mb(df_no_class, "ABCA9", method="iamb", alpha=0.01)
####Discretize data set into binary####
#Find the mean expression from all genes
sum_col<-colSums(df_no_class)
total<-colSums(data.frame(sum_col))
mean_all_genes<-total/(1212*50)
#Get the class label
class<-df[,51]
#Assign L for gene has expression below mean and H for above
bin_df<-ifelse(df[,1:50] < 304.7847, "L", "H")
bin_df<-data.frame(bin_df)
bin_df$class<-class
bin_df<-bin_df%>% mutate_all(~as.factor(.))
bin_df.mat<-data.matrix(bin_df)
#PC Select to find parent and children set of class variable
pcS.class <- pcSelect(bin_df.mat[,51],bin_df.mat[,-51], alpha=0.01)
pcS.class.df<-as.data.frame(pcS.class$G)
pcS.class.true<-pcS.class.df%>%filter(pcS.class.df$`pcS.class$G` == "TRUE")
pcS.class.true
####Naive Bayes for class with all genes
indxTrain <- createDataPartition(y = bin_df$class,p = 0.7,list = FALSE)
training <- bin_df[indxTrain,]
testing <- bin_df[-indxTrain,]
#Naive_Bayes_Model <- train(as.factor(class)~., data=training, trControl=trainControl(method='cv',number=10), method="nb")
####Naive Bayes for class with parent and children set of class####
df_selected<-bin_df[,c("FIGF","CD300LG","SCARA5","ATP1A2","ARHGAP20","ATOH8","KLHL29","MAMDC2","CXCL2","TMEM220","class")]
selected_indxTrain <- createDataPartition(y = df_selected$class,p = 0.7,list = FALSE)
selected_training <- df_selected[selected_indxTrain,]
selected_testing <- df_selected[-selected_indxTrain,]
####Bayesian Network
#Construct conditional probability table
hl<-c("H","L")
cn<-c("C","N")
btnl9 <- cptable(~BTNL9, values=c(0.179,0.821),levels=hl)
library(gRain)
btnl9 <- cptable(~BTNL9, values=c(0.179,0.821),levels=hl)
cd300lg.btnl9 <- cptable(~CD300LG|BTNL9, values=c(0.115,0.064,0.007,0.814), levels=hl)
class.cd300lg <- cptable(~CLASS|CD300LG, values=c(0.031,0.09,0.876,0.002), levels=cn)
igsf10.class <- cptable(~IGSF10|CLASS, values=c(0.059,0.849,0.081,0.012), levels=hl)
abca9.btnl9.igsf10 <- cptable(~ABCA9|BTNL9:IGSF10, values=c(0.094,0.003,0.009,0.033,0.021,0.06,0.013,0.766),levels=hl)
#Compile to 1 conditional table
plist <- compileCPT(list(btnl9, cd300lg.btnl9, class.cd300lg, igsf10.class, abca9.btnl9.igsf10))
#store bayesian network
net1<-grain(plist)
#plot skeleton of the gene regulatory network using hiton pc algorithm
## estimate Skeleton
plot(skel.net)
#plot skeleton of the gene regulatory network using hiton pc algorithm
## estimate Skeleton
plot(skel.net, main="Skeleton of Gene Regulatory Network")
knitr::include_graphics("D:/UniSA/2020/SEM 2 - Spring/Advanced Analytic Techniques 2 (INFS 5094)/Project/Resources/pc_algo.jpg")
knitr::include_graphics("D:/UniSA/2020/SEM 2 - Spring/Advanced Analytic Techniques 2 (INFS 5094)/Project/Resources/pc_algo.jpg")
knitr::kable(head(mtcars[, 1:4]), "pipe")
knitr::kable(head(mtcars)
knitr::kable(head(mtcars))
knitr::kable(mtcars)
: Definition 1
loop through each species
tes through each species
try algo
tinytex::parse_install(
text = "! LaTeX Error: File `kableExtra.sty' not found."
)
tinytex::parse_packages("kableExtra.sty")
knitr::opts_chunk$set(echo = TRUE)
knitr::kable(btnl9.table, caption = "Table with kable",escape = FALSE)
knitr::kable(btnl9.table, caption = "Table with kable",escape = FALSE)
library(pcalg)
library(bnlearn)
library(dplyr)
library(dplyr)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(caret)
library(e1071)
library(klaR)
library(caret)
library(e1071)
library(klaR)
library(gRain)
#load dataframe
df<-read.csv("BRCA_RNASeqv2_top50.csv", header=TRUE)
#remove class label
df_no_class<-df[,1:50]
df.mat<-data.matrix(df_no_class)
gene_name<-colnames(df_no_class)
####Show Skeleton network####
skel.net <- pcalg::skeleton(suffStat = list(C = cor(df.mat), n = nrow (df.mat)),
indepTest = gaussCItest, alpha = 0.01, p = ncol(df_no_class))
####Show Skeleton network####
skel.net <- pcalg::skeleton(suffStat = list(C = cor(df.mat), n = nrow (df.mat)),
indepTest = gaussCItest, alpha = 0.01, p = ncol(df_no_class))
####Find top 10 genes that have causal effect on ABCA9####
pc.fit <- pc(suffStat = list(C = cor(df_no_class), n = nrow(df_no_class)),
indepTest = gaussCItest, labels=colnames(df_no_class) ,alpha = 0.01)
#Create empty Matrix
gene_mat<-matrix(nrow = 50,ncol = 4)
#Loop through all genes to get causal effect of all genes on ABCA9
for (i in 1:ncol(df.mat)){
gene_mat[i,]<-ida(i, 22, cov(df.mat), pc.fit@graph)
}
#Loop through all genes to get causal effect of all genes on ABCA9
for (i in 1:ncol(df.mat)){
gene_mat[i,]<-ida(i, 22, cov(df.mat), pc.fit@graph)
}
#Find the minimum absolute value from multiple causal effect
causal_mat<-apply(abs(gene_mat),1,min)
causal_mat<-as.data.frame(causal_mat)
causal_mat$gene_index <- rownames(causal_mat)
causal_mat$gene <- gene_name
names(causal_mat)[names(causal_mat) == "causal_mat"] <- "Causal_Effect"
names(causal_mat)[names(causal_mat) == "causal_mat"] <- "Causal_Effect"
#Remove gene 22 as it is ABCA9
causal_mat<-causal_mat[-22,]
#Sort genes base on descending causal effect
causal_mat<-causal_mat[order(-causal_mat$Causal_Effect),]
causal_df<-as.data.frame(causal_mat[1:10,])
colnames(causal_df) <- c("Causal Effect", "Gene Index", "Gene")
####Learn Markov Blanket of ABCA9####
MB.ABCA9<-learn.mb(df_no_class, "ABCA9", method="iamb", alpha=0.01)
####Discretize data set into binary####
#Find the mean expression from all genes
sum_col<-colSums(df_no_class)
total<-colSums(data.frame(sum_col))
mean_all_genes<-total/(1212*50)
#Get the class label
class<-df[,51]
#Assign L for gene has expression below mean and H for above
bin_df<-ifelse(df[,1:50] < 304.7847, "L", "H")
bin_df<-data.frame(bin_df)
bin_df$class<-class
bin_df<-bin_df%>% mutate_all(~as.factor(.))
bin_df.mat<-data.matrix(bin_df)
#PC Select to find parent and children set of class variable
pcS.class <- pcSelect(bin_df.mat[,51],bin_df.mat[,-51], alpha=0.01)
#PC Select to find parent and children set of class variable
pcS.class <- pcSelect(bin_df.mat[,51],bin_df.mat[,-51], alpha=0.01)
pcS.class.df<-as.data.frame(pcS.class$G)
pcS.class.true<-pcS.class.df%>%filter(pcS.class.df$`pcS.class$G` == "TRUE")
####Bayesian Network
btnl9.table<-data.frame("P(BTNL9=H)" = 0.179, check.names = FALSE)
knitr::kable(btnl9.table, caption = "Table with kable",escape = FALSE)
stargazer::stargazer(btnl9.table, title = "Table with stargazer")
knitr::opts_chunk$set(echo = TRUE)
library(pcalg)
library(bnlearn)
library(dplyr)
library(tidyverse)
library(caret)
library(e1071)
library(klaR)
library(gRain)
#load dataframe
df<-read.csv("BRCA_RNASeqv2_top50.csv", header=TRUE)
#remove class label
df_no_class<-df[,1:50]
df.mat<-data.matrix(df_no_class)
gene_name<-colnames(df_no_class)
####Show Skeleton network####
skel.net <- pcalg::skeleton(suffStat = list(C = cor(df.mat), n = nrow (df.mat)),
indepTest = gaussCItest, alpha = 0.01, p = ncol(df_no_class))
####Find top 10 genes that have causal effect on ABCA9####
pc.fit <- pc(suffStat = list(C = cor(df_no_class), n = nrow(df_no_class)),
indepTest = gaussCItest, labels=colnames(df_no_class) ,alpha = 0.01)
#Create empty Matrix
gene_mat<-matrix(nrow = 50,ncol = 4)
#Loop through all genes to get causal effect of all genes on ABCA9
for (i in 1:ncol(df.mat)){
gene_mat[i,]<-ida(i, 22, cov(df.mat), pc.fit@graph)
}
#Find the minimum absolute value from multiple causal effect
causal_mat<-apply(abs(gene_mat),1,min)
causal_mat<-as.data.frame(causal_mat)
causal_mat$gene_index <- rownames(causal_mat)
causal_mat$gene <- gene_name
names(causal_mat)[names(causal_mat) == "causal_mat"] <- "Causal_Effect"
#Remove gene 22 as it is ABCA9
causal_mat<-causal_mat[-22,]
#Sort genes base on descending causal effect
causal_mat<-causal_mat[order(-causal_mat$Causal_Effect),]
causal_df<-as.data.frame(causal_mat[1:10,])
colnames(causal_df) <- c("Causal Effect", "Gene Index", "Gene")
####Learn Markov Blanket of ABCA9####
MB.ABCA9<-learn.mb(df_no_class, "ABCA9", method="iamb", alpha=0.01)
####Discretize data set into binary####
#Find the mean expression from all genes
sum_col<-colSums(df_no_class)
total<-colSums(data.frame(sum_col))
mean_all_genes<-total/(1212*50)
#Get the class label
class<-df[,51]
#Assign L for gene has expression below mean and H for above
bin_df<-ifelse(df[,1:50] < 304.7847, "L", "H")
bin_df<-data.frame(bin_df)
bin_df$class<-class
bin_df<-bin_df%>% mutate_all(~as.factor(.))
bin_df.mat<-data.matrix(bin_df)
#PC Select to find parent and children set of class variable
pcS.class <- pcSelect(bin_df.mat[,51],bin_df.mat[,-51], alpha=0.01)
pcS.class.df<-as.data.frame(pcS.class$G)
pcS.class.true<-pcS.class.df%>%filter(pcS.class.df$`pcS.class$G` == "TRUE")
####Naive Bayes for class with all genes
indxTrain <- createDataPartition(y = bin_df$class,p = 0.7,list = FALSE)
training <- bin_df[indxTrain,]
testing <- bin_df[-indxTrain,]
#Naive_Bayes_Model <- train(as.factor(class)~., data=training, trControl=trainControl(method='cv',number=10), method="nb")
####Naive Bayes for class with parent and children set of class####
df_selected<-bin_df[,c("FIGF","CD300LG","SCARA5","ATP1A2","ARHGAP20","ATOH8","KLHL29","MAMDC2","CXCL2","TMEM220","class")]
selected_indxTrain <- createDataPartition(y = df_selected$class,p = 0.7,list = FALSE)
selected_training <- df_selected[selected_indxTrain,]
selected_testing <- df_selected[-selected_indxTrain,]
####Bayesian Network
btnl9.table<-data.frame("P(BTNL9=H)" = 0.179, check.names = FALSE)
#Construct conditional probability table
hl<-c("H","L")
cn<-c("C","N")
btnl9 <- cptable(~BTNL9, values=c(0.179,0.821),levels=hl)
cd300lg.btnl9 <- cptable(~CD300LG|BTNL9, values=c(0.115,0.064,0.007,0.814), levels=hl)
class.cd300lg <- cptable(~CLASS|CD300LG, values=c(0.031,0.09,0.876,0.002), levels=cn)
igsf10.class <- cptable(~IGSF10|CLASS, values=c(0.059,0.849,0.081,0.012), levels=hl)
abca9.btnl9.igsf10 <- cptable(~ABCA9|BTNL9:IGSF10, values=c(0.094,0.003,0.009,0.033,0.021,0.06,0.013,0.766),levels=hl)
#Compile to 1 conditional table
plist <- compileCPT(list(btnl9, cd300lg.btnl9, class.cd300lg, igsf10.class, abca9.btnl9.igsf10))
#store bayesian network
net1<-grain(plist)
knitr::kable(btnl9.table,align = "c",caption="Top 10 Genes Having Causal Effect on ABCA9")
prop.table(table(bin_df$CD300LG,bin_df$BTNL9))
cd300lg.tab<-data.frame("BTNL9" = c("H","L"), "P(CD300LG|BTNL9)", check.names = FALSE)
cd300lg.tab
prop.table(table(bin_df$IGSF10,bin_df$class))
cd300lg.tab<-data.frame("BTNL9" = c("H","L"), "P(CD300LG|BTNL9)"=c(0.115,0.007), check.names = FALSE)
cd300lg.tab
cd300lg.table<-data.frame("BTNL9" = c("H","L"), "P(CD300LG|BTNL9)"=c(0.115,0.007), check.names = FALSE)
table(bin_df$CD300LG,bin_df$BTNL9)
knitr::kable(btnl9.table,align = "c",caption="P(BTNL9 = H)")
knitr::kable(cd300lg.table,align = "c",caption="P(CD300LG = H)")
prop.table(table(bin_df$class,bin_df$CD300LG))
class.tab<-data.frame("CD300LG" = c("H","L"), "P(CLASS|DF300LG)"=c(0.031,0.876), check.names = FALSE)
class.tab
class.table<-data.frame("CD300LG" = c("H","L"), "P(CLASS|DF300LG)"=c(0.031,0.876), check.names = FALSE)
prop.table(table(bin_df$IGSF10,bin_df$class))
igsf10.tab<-data.frame("CLASS" = c("C","N"), "P(IGSF10|CLASS)"=c(0.059,0.081), check.names = FALSE)
igsf10.tab
addmargins(prop.table(table(bin_df$CD300LG,bin_df$BTNL9)))
addmargins(table(bin_df$CD300LG,bin_df$BTNL9))
addmargins(prop.table(table(bin_df$CD300LG,bin_df$BTNL9),1))
prop.table(table(bin_df$CD300LG,bin_df$BTNL9),1)
prop.table(table(bin_df$BTNL9),1)
prop.table(table(bin_df$BTNL9))
prop.table(table(bin_df$CD300LG,bin_df$BTNL9),1)
addmargins(prop.table(table(bin_df$CD300LG,bin_df$BTNL9),1))
addmargins(prop.table(table(bin_df$CD300LG,bin_df$BTNL9),2))
addmargins(prop.table(table(bin_df$IGSF10,bin_df$class),2))
addmargins(prop.table(table(bin_df$class,bin_df$CD300LG),2))
prop.table(table(bin_df$CD300LG,bin_df$BTNL9),2)
addmargins(prop.table(table(bin_df$CD300LG,bin_df$BTNL9),2))
addmargins(prop.table(table(bin_df$class,bin_df$CD300LG),2))
addmargins(prop.table(table(bin_df$IGSF10,bin_df$class),2))
addmargins(prop.table(table(bin_df$ABCA9,bin_df$BTNL9,bin_df$IGSF10),2))
addmargins(prop.table(table(bin_df$ABCA9,bin_df$BTNL9,bin_df$IGSF10),2))
#test prop table
addmargins(prop.table(table(bin_df$ABCA9,bin_df$class,bin_df$IGSF10),2))
#test table
abca9.tab<-data.frame("CLASS" = c("C","N"), "BTNL9" = c("H","L"), "P(ABCA9|CLASS,BTNL9)"=c(0.065,0.875,0.02,0.2), check.names = FALSE)
abca9.tab
#test prop table
addmargins(prop.table(table(bin_df$ABCA9,bin_df$BTNL9,bin_df$class),2))
addmargins(prop.table(table(bin_df$ABCA9,bin_df$BTNL9,bin_df$IGSF10),2))
#test table
abca9.tab<-data.frame("CLASS" = c("C","C","N","N"), "BTNL9" = c("H","L"), "P(ABCA9|CLASS,BTNL9)"=c(0.065,0.875,0.02,0.2), check.names = FALSE)
abca9.tab
addmargins(prop.table(table(bin_df$ABCA9,bin_df$BTNL9,bin_df$IGSF10),2))
abca9.tab<-data.frame("IGSF10" = c("H","H","L","L"), "BTNL9" = c("H","L"), "P(ABCA9|IGSF10,BTNL9)"=c(0.525,0.011,0.12,0.016), check.names = FALSE)
abca9.tab
querygrain(net1, nodes=c("CLASS","CD300LG","BTNL9"), type="conditional")
btnl9 <- cptable(~BTNL9, values=c(0.179,0.821),levels=hl)
cd300lg.btnl9 <- cptable(~CD300LG|BTNL9, values=c(0.641,0.359,0.008,0.002), levels=hl)
class.cd300lg <- cptable(~CLASS|CD300LG, values=c(0.259,0.741,0.997,0.003), levels=cn)
igsf10.class <- cptable(~IGSF10|CLASS, values=c(0.065,0.935,0.875,0.125), levels=hl)
class.cd300lg
igsf10.class
class.cd300lg
addmargins(prop.table(table(bin_df$class,bin_df$CD300LG),2))
addmargins(prop.table(table(bin_df$ABCA9,bin_df$BTNL9,bin_df$IGSF10),2))
abca9.btnl9.igsf10 <- cptable(~ABCA9|BTNL9:IGSF10, values=c(0.525,0.475,0.011,0.989,0.12,0.88,0.016,0.984),levels=hl)
plist <- compileCPT(list(btnl9, cd300lg.btnl9, class.cd300lg, igsf10.class, abca9.btnl9.igsf10))
plist
net1<-grain(plist)
plot(net1$dag)
querygrain(net1, nodes=c("BTNL9","CD300LG","IGSF10","ABCA9"), type="joint")
querygrain(net1, nodes=c("CLASS","CD300LG","BTNL9"), type="conditional")
abca9.tab
abca9.btnl9.igsf10
abca9.btnl9.class <- cptable(~ABCA9|BTNL9:IGSF10, values=c(0.525,0.475,0.011,0.989,0.12,0.88,0.016,0.984),levels=cn)
abca9.btnl9.class
abca9.btnl9.class <- cptable(~ABCA9|BTNL9:CLASS, values=c(0.525,0.475,0.011,0.989,0.12,0.88,0.016,0.984),levels=cn)
abca9.btnl9.class
btnl9 <- cptable(~BTNL9, values=c(0.179,0.821),levels=hl)
cd300lg.btnl9 <- cptable(~CD300LG|BTNL9, values=c(0.641,0.359,0.008,0.002), levels=hl)
class.cd300lg <- cptable(~CLASS|CD300LG, values=c(0.259,0.741,0.997,0.003), levels=cn)
igsf10.class <- cptable(~IGSF10|CLASS, values=c(0.065,0.935,0.875,0.125), levels=hl)
abca9.btnl9.igsf10 <- cptable(~ABCA9|BTNL9:IGSF10, values=c(0.525,0.475,0.011,0.989,0.12,0.88,0.016,0.984),levels=hl)
#Compile to 1 conditional table
plist <- compileCPT(list(btnl9, cd300lg.btnl9, class.cd300lg, igsf10.class, abca9.btnl9.igsf10))
#store bayesian network
net1<-grain(plist)
querygrain(net1, nodes=c("CLASS","CD300LG","BTNL9"), type="conditional")
querygrain(net1, nodes=c("BTNL9","CD300LG","IGSF10","ABCA9"), type="joint")
abca9.btnl9.class
library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
plist <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
plist
d.be
#Checking the (conditional) probability of some nodes
plist$tub
plist$either
plist$dysp
plist <- compileCPT(list(btnl9, cd300lg.btnl9, class.cd300lg, igsf10.class, abca9.btnl9.igsf10))
plist
plist$ABCA9
querygrain(net1, nodes=c("CLASS","CD300LG","BTNL9"), type="conditional")
querygrain(net1, nodes=c("CLASS","CD300LG"), type="conditional")
querygrain(net1, nodes=c("CLASS","BTNL9"), type="conditional")
querygrain(net1, nodes=c("IGSF10","CLASS","CD300LG"), type="conditional")
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
plist <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
plist
d.be
#Checking the (conditional) probability of some nodes
plist$tub
plist$either
plist$dysp
querygrain(net1, nodes=c("xray","smoke","asia"), type="conditional")
querygrain(net1, nodes=c("xray","smoke","asia"), type="conditional")
net1=grain(plist)
querygrain(net1, nodes=c("xray","smoke","asia"), type="conditional")
plot(net1$dag)
plist$xray
querygrain(net1, nodes=c("bronc","smoke","asia"), type="conditional")
querygrain(net1, nodes=c("dysp","bronc","smoke"), type="conditional")
querygrain(net1, nodes=c("CLASS","CD300LG","BTNL9"), type="conditional")
plist <- compileCPT(list(btnl9, cd300lg.btnl9, class.cd300lg, igsf10.class, abca9.btnl9.igsf10))
plist
plist$ABCA9
net1<-grain(plist)
querygrain(net1, nodes=c("IGSF10","CLASS","CD300LG"), type="conditional")
querygrain(net1, nodes=c("CLASS","CD300LG","BTNL9"), type="conditional")
setwd("D:/")
df<-read.csv("coles_deal.csv", header=TRUE)
View(df)
df<-read.csv("coles_deal.csv", header=TRUE,namecheck=FALSE)
df<-read.csv("coles_deal.csv", header=TRUE,check.names = FALSE)
ts(df)
View(df)
df<-read.csv("coles_deal.csv", header=TRUE,check.names = TRUE)
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
View(df)
df<-read.csv("coles_deal.csv", header=TRUE,check.names = FALSE)
View(df)
df$`ï»¿Date`
class(df$`ï»¿Date`)
class(df$`ï»¿Date`)
df<-read.csv("coles_deal.csv", header=TRUE)
View(df)
class(df$ï..Date)
install.packages("aweek")
set_week_start("Wednesday")
library(aweek)
set_week_start("Wednesday")
View(df)
library(lubridate)
df$ï..Date<-as.Date(df$ï..Date, format="dd/mm/yyy")
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
df$ï..Date<-as.Date(df$ï..Date, format="mm/dd/yyy")
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
View(df)
df$ï..Date<-as.Date(df$ï..Date, format="yyyy/mm/dd")
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
View(df)
df$ï..Date<-as.Date(df$ï..Date, format="%d/%m/%Y")
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
df$ï..Date<-as.Date(df$ï..Date, format="%Y/%m/%d")
View(df)
df<-read.csv("coles_deal.csv", header=TRUE)
df$ï..Date<-as.Date(df$ï..Date, format="%d/%m/%Y")
ts(df)
week(df$ï..Date)
set_week_start("Monday")
df$ï..Date<-as.Date(df$ï..Date, format="%d/%m/%Y")
week(df$ï..Date)
View(df)
set_week_start("Sunday")
df<-read.csv("coles_deal.csv", header=TRUE)
df$ï..Date<-as.Date(df$ï..Date, format="%d/%m/%Y")
week(df$ï..Date)
week(ymd(df$ï..Date))
wday(df$ï..Date)
wday(df$ï..Date, label = TRUE, abbr = FALSE)
week(ymd(df$ï..Date))
wday(df$ï..Date, abbr = FALSE)
wday(df$ï..Date, label = TRUE)
colnames(df)
colnames(df)[1] <- "Date"
df<-read.csv("coles_deal.csv", header=TRUE)
colnames(df)[1] <- "Date"
df$Date<-as.Date(df$Date, format="%d/%m/%Y")
plot(ts(df))
add_column(df, "week.day" = wday(df$Date, label = TRUE, abbr = FALSE), .before = "Date")
library(tibble)
df<-add_column(df, "week.day" = wday(df$Date, label = TRUE, abbr = FALSE), .before = "Date")
View(df)
df<-add_column(df, "week" = week(df$Date), .after = "Date")
doves<-df%>%select(3,4)
library(tidyverse)
doves<-df%>%select(3,4)
View(doves)
mean_doves<-aggregate(doves,by=week,mean)
mean_doves<-aggregate(doves,group_by(week),mean)
mean_doves<-summarise(doves,group_by = doves$week, mean)
mean_doves<-doves%>%group_by(week)%>%summarise(weekly_price=mean(Dove.Triple.Moisturising.Body.Wash.1L))
View(mean_doves)
df<-read.csv("coles_deal.csv", header=TRUE)
colnames(df)[1] <- "Date"
df$Date<-as.Date(df$Date, format="%d/%m/%Y")
wday(df$Date, label = TRUE, abbr = FALSE)
week(df$Date)
df<-add_column(df, "week.day" = wday(df$Date, label = TRUE, abbr = FALSE), .before = "Date")
df<-add_column(df, "week" = week(df$Date), .after = "Date")
doves<-df%>%select(3,4)
mean_doves<-doves%>%group_by(week)%>%summarise(weekly_price=mean(Dove.Triple.Moisturising.Body.Wash.1L))
View(mean_doves)
View(doves)
View(df)
yearweek(df$Date)
yearAndweeks <- strftime(df$Date, format = "%Y-W%V")
df<-add_column(df, "year.week" = strftime(df$Date, format = "%Y-W%V"), .after = "Date")
doves<-df%>%select(3,5)
View(doves)
mean_doves<-doves%>%group_by(year.week)%>%summarise(weekly_price=mean(Dove.Triple.Moisturising.Body.Wash.1L))
View(mean_doves)
set_week_start("Wednesday")
df<-read.csv("coles_deal.csv", header=TRUE)
colnames(df)[1] <- "Date"
df$Date<-as.Date(df$Date, format="%d/%m/%Y")
wday(df$Date, label = TRUE, abbr = FALSE)
week(df$Date)
df<-add_column(df, "week.day" = wday(df$Date, label = TRUE, abbr = FALSE), .before = "Date")
df<-add_column(df, "week" = week(df$Date), .after = "Date")
df<-add_column(df, "year.week" = strftime(df$Date, format = "%Y-W%V"), .after = "Date")
doves<-df%>%select(3,5)
mean_doves<-doves%>%group_by(year.week)%>%summarise(weekly_price=mean(Dove.Triple.Moisturising.Body.Wash.1L))
View(mean_doves)
View(doves)
